<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComboPatterns.AFAP</name>
    </assembly>
    <members>
        <member name="T:ComboPatterns.AFAP.AdapterBase">
            <summary>
            Implementation <see cref="T:ComboPatterns.Interfaces.IAdapter"/>
            </summary>
        </member>
        <member name="M:ComboPatterns.AFAP.AdapterBase.GetAdapter``1">
            <summary>
            Adapter creation method
            </summary>
            <typeparam name="TAdapter">type of adapter created</typeparam>
            <returns>adapter <typeparamref name="TAdapter"/></returns>
        </member>
        <member name="M:ComboPatterns.AFAP.AdapterBase.GetAdapterStatic``1(ComboPatterns.Interfaces.IAbstractFactory)">
            <summary>
            Adapter creation method
            </summary>
            <typeparam name="TAdapter">type of adapter created</typeparam>
            <param name="factory">adapter factory</param>
            <returns>adapter <typeparamref name="TAdapter"/></returns>
        </member>
        <member name="T:ComboPatterns.AFAP.AdapterProxyBase`1">
            <summary>
            Implement <see cref="T:ComboPatterns.Interfaces.IFactoryProxyMethod`1"/> and <see cref="T:ComboPatterns.AFAP.AdapterBase"/>
            </summary>
        </member>
        <member name="M:ComboPatterns.AFAP.AdapterProxyBase`1.#ctor(System.Func{`0})">
            <summary>
            Constructor
            </summary>
            <param name="createProxyFunc">Func creation proxy</param>
        </member>
        <member name="M:ComboPatterns.AFAP.AdapterProxyBase`1.CreateProxy">
            <summary>
            Proxy creation method 
            </summary>
            <returns>proxy</returns>
        </member>
        <member name="T:ComboPatterns.AFAP.AdapterProxyBase`2">
            <summary>
            Implement <see cref="T:ComboPatterns.Interfaces.IFactoryProxyMethod`2"/> and <see cref="T:ComboPatterns.AFAP.AdapterProxyBase`1"/>
            </summary>
            <typeparam name="TProxy"></typeparam>
            <typeparam name="TProxyParameter"></typeparam>
        </member>
        <member name="M:ComboPatterns.AFAP.AdapterProxyBase`2.#ctor(System.Func{`0},System.Func{`1,`0})">
            <summary>
            Constructor
            </summary>
            <param name="createProxyFunc">Func creation proxy</param>
            <param name="createProxyFuncWithParam">Func creation proxy with parameters type <typeparamref name="TProxyParameter"/></param>
        </member>
        <member name="M:ComboPatterns.AFAP.AdapterProxyBase`2.CreateProxy(`1)">
            <summary>
            Proxy creation method
            </summary>
            <param name="parameter">proxy parameter</param>
            <returns>proxy</returns>
        </member>
        <member name="T:ComboPatterns.AFAP.FacadeBase">
            <summary>
            Implementation <see cref="T:ComboPatterns.Interfaces.IFacade"/>
            </summary>
        </member>
        <member name="M:ComboPatterns.AFAP.FacadeBase.GetAdapter``1">
            <summary>
            Adapter creation method
            </summary>
            <typeparam name="TAdapter">type of adapter created</typeparam>
            <returns>adapter <typeparamref name="TAdapter"/></returns>
        </member>
        <member name="M:ComboPatterns.AFAP.FacadeBase.GetFacade``1">
            <summary>
            Facade creation method
            </summary>
            <typeparam name="TFacade">type of facade created</typeparam>
            <returns>facade <typeparamref name="TFacade"/></returns>
        </member>
        <member name="M:ComboPatterns.AFAP.FacadeBase.GetFacadeStatic``1(ComboPatterns.Interfaces.IAbstractFactory)">
            <summary>
            Facade creation method
            </summary>
            <typeparam name="TFacade">type of facade created</typeparam>
            <param name="factory">facade factory</param>
            <returns>facade <typeparamref name="TFacade"/></returns>
        </member>
        <member name="T:ComboPatterns.AFAP.FactoryBase">
            <summary>
            Implementation <see cref="T:ComboPatterns.Interfaces.IAbstractFactory"/>
            </summary>
        </member>
        <member name="M:ComboPatterns.AFAP.FactoryBase.CreateObject``2(System.Func{``0,``1},``0)">
            <summary>
            Object Creation Method
            </summary>
            <typeparam name="TObj">type of object to create</typeparam>
            <typeparam name="TParameters">type of parameters for creating an object</typeparam>
            <param name="factoryFunc">function to create objects</param>
            <param name="parameters">options for creating an object</param>
            <returns>object</returns>
        </member>
        <member name="M:ComboPatterns.AFAP.FactoryBase.GetFacade``1">
            <summary>
            Facade creation method
            </summary>
            <typeparam name="TFacade">type of facade created</typeparam>
            <returns>facade <typeparamref name="TFacade"/></returns>
        </member>
        <member name="M:ComboPatterns.AFAP.FactoryBase.GetAdapter``1">
            <summary>
            Adapter creation method
            </summary>
            <typeparam name="TAdapter">type of adapter created</typeparam>
            <returns>adapter <typeparamref name="TAdapter"/></returns>
        </member>
    </members>
</doc>
